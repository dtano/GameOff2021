using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Customer : MonoBehaviour
{
    // SHOULD HAVE:
    // - Name
    // - List of traits
    // - Stats
    // A customer will be randomly generated by another script, which means that the variables below may be added to another script called CustomerData
    private const int NUM_STATS = 3;
    
    [SerializeField] SpriteRenderer spriteRenderer;
    [SerializeField] SurvivalKit _survivalKit;

    // Maybe CustomerData should be a mono
    [SerializeField] private CustomerData _data;
    [SerializeField] private List<Trait> traits;
    private float _survivabilityScore; // Will be a percentage in game

    public SurvivalKit SurvivalKit => _survivalKit;
    public CustomerData CustomerData {get => _data; set => CustomerSetup(value); }

    // Start is called before the first frame update
    void Awake()
    {
        //spriteRenderer = GetComponentInChildren<SpriteRenderer>();
        if(_survivalKit == null){
            _survivalKit = GetComponent<SurvivalKit>();
        }

        _survivalKit?.SetAffectedCustData(_data);
        
        if(traits == null){
            traits = new List<Trait>();
        }
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    private void CustomerSetup(CustomerData custData)
    {
        //List<Trait> customerTraits = custData.Traits;
        if(traits != null && traits.Count > 0){
            foreach(Trait trait in traits){
                trait.Apply(this);
            }
        }

        _data = custData;
    }

    // Gonna move this function elsewhere
    public float CalculateSurvivalProbability()
    {
        int maxStatValue = Stat.GetMaxStatValue();
        // THE METHOD COMMENTED BELOW CAN BE USED IF WEIGHTS ARE ASSIGNED TO EACH STAT
        //float prob = (_endurance.GetBaseValue()/maxStatValue) + (_survivability.GetBaseValue()/maxStatValue) + (_intelligence.GetBaseValue()/maxStatValue);
           
        float prob = (_data.Endurance.ModifiedValue + _data.Survivability.ModifiedValue + 
                      _data.Intelligence.ModifiedValue) / (maxStatValue * NUM_STATS);

        if(_data != null) _data.SurvivalProbability = prob * 100;

        return prob * 100;
    }
}
